// File automatically generated by: PandA framework version=0.8.0c1
// Send any bug to: ferrandi@elet.polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_GPLv3.
// 
// This hardware description is free; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
// 
// This hardware description is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
// 
// You should have received a copy of the GNU General Public License
// along with the bambu program; see the files COPYING3
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>, Christian Pilato <pilato@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module register_FU(in1, wenable, clock, reset, out1);
  parameter BITSIZE_in1=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  input clock;
  input reset;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  reg [BITSIZE_out1-1:0] reg_out1;
  assign out1 = reg_out1;
  always @(posedge clock or posedge reset)
    if (reset)
      reg_out1 <= {BITSIZE_out1{1'b0}};
    else if (wenable)
      reg_out1 <= in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// Datapath RTL descrition for coreC
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module datapath_coreC(clock, reset, in_port_a, in_port_b, return_port, wrenable_reg_0);
  // IN
  input clock;
  input reset;
  input signed [31:0] in_port_a;
  input signed [31:0] in_port_b;
  input wrenable_reg_0;
  // OUT
  output signed [31:0] return_port;
  // Component and signal declarations
  wire [31:0] out_fu_coreC_167_176;
  wire [31:0] out_reg_0;
  
  plus_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) fu_coreC_167_176 (.out1(out_fu_coreC_167_176), .in1(in_port_a), .in2(in_port_b));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_0 (.out1(out_reg_0), .in1(out_fu_coreC_167_176), .wenable(wrenable_reg_0), .clock(clock), .reset(reset));
  // io-signal post fix
  assign return_port = out_reg_0;

endmodule

// FSM based controller descrition for coreC
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module controller_coreC(done_port, wrenable_reg_0, clock, reset, start_port);
  // IN
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output wrenable_reg_0;
  parameter [0:0] S_0 = 1'd0,
    S_1 = 1'd1;
  // synthesis attribute init of _present_state is S_0;
  // synthesis attribute use_sync_reset of _present_state is no;
  reg [0:0] _present_state, _next_state;
  reg done_port;
  reg wrenable_reg_0;
  
  always @(posedge clock or posedge reset)
    if (reset) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(_present_state or start_port)
  begin
    _next_state = S_0;
    done_port = 1'b0;
    wrenable_reg_0 = 1'b0;
    case (_present_state)
      S_0 :
        if(~start_port)
        begin
          _next_state = S_0;
        end
        else
        begin
          wrenable_reg_0 = 1'b1;
          _next_state = S_1;
        end
      S_1 :
        begin
          _next_state = S_0;
          done_port = 1'b1;
        end
    endcase
  end
endmodule

// Top circuit for coreC
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module coreC(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input signed [31:0] a;
  input signed [31:0] b;
  // OUT
  output done_port;
  output signed [31:0] return_port;
  // Component and signal declarations
  wire wrenable_reg_0;
  
  controller_coreC Controller_i (.done_port(done_port), .wrenable_reg_0(wrenable_reg_0), .clock(clock), .reset(reset), .start_port(start_port));
  datapath_coreC Datapath_i (.return_port(return_port), .clock(clock), .reset(reset), .in_port_a(a), .in_port_b(b), .wrenable_reg_0(wrenable_reg_0));

endmodule

