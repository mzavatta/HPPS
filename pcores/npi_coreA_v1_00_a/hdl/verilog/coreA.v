// File automatically generated by: PandA framework version=0.8.0c1
// Send any bug to: ferrandi@elet.polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_GPLv3.
// 
// This hardware description is free; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
// 
// This hardware description is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
// 
// You should have received a copy of the GNU General Public License
// along with the bambu program; see the files COPYING3
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>, Christian Pilato <pilato@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module constant_value(out1);
  parameter BITSIZE_out1=32, value=32'b00000000000000000000000000000000;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = value;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>, Christian Pilato <pilato@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module register_FU(in1, wenable, clock, reset, out1);
  parameter BITSIZE_in1=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  input clock;
  input reset;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  reg [BITSIZE_out1-1:0] reg_out1;
  assign out1 = reg_out1;
  always @(posedge clock or posedge reset)
    if (reset)
      reg_out1 <= {BITSIZE_out1{1'b0}};
    else if (wenable)
      reg_out1 <= in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>, Christian Pilato <pilato@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module ASSIGN_FU(in1, out1);
  parameter BITSIZE_in1=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module IUdata_converter_FU(in1, out1);
  parameter BITSIZE_in1=32, BITSIZE_out1=32;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module pointer_plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module lt_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 < in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module ui_mult_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=32;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 * in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module MEMORY_CTRL(clock, start_port, in1, in2, in3, sel_LOAD, sel_STORE, done_port, out1, Min_oe_ram, Mout_oe_ram, Min_we_ram, Mout_we_ram, Min_addr_ram, Mout_addr_ram, M_Rdata_ram, Min_Wdata_ram, Mout_Wdata_ram, Min_data_ram_size, Mout_data_ram_size, M_DataRdy);
  parameter BITSIZE_in1=1, BITSIZE_in2=32, BITSIZE_in3=8, BITSIZE_out1=32, BITSIZE_Min_addr_ram=32, BITSIZE_Mout_addr_ram=32, BITSIZE_M_Rdata_ram=64, BITSIZE_Min_Wdata_ram=64, BITSIZE_Mout_Wdata_ram=64;
  // IN
  input clock;
  input start_port;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input sel_LOAD;
  input sel_STORE;
  input Min_oe_ram;
  input Min_we_ram;
  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;
  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;
  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;
  input [7:0] Min_data_ram_size;
  input M_DataRdy;
  // OUT
  output done_port;
  output [BITSIZE_out1-1:0] out1;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;
  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;
  output [7:0] Mout_data_ram_size;
  assign Mout_addr_ram = (sel_LOAD || sel_STORE) ? (in2) : Min_addr_ram;
  assign Mout_oe_ram = sel_LOAD ? 1'b1 : Min_oe_ram;
  assign Mout_we_ram = sel_STORE ? 1'b1 : Min_we_ram;
  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];
  assign Mout_Wdata_ram = sel_STORE ? in1 : Min_Wdata_ram;
  assign Mout_data_ram_size = sel_STORE || sel_LOAD ? in3[7:0] : Min_data_ram_size;
  assign done_port = M_DataRdy;
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};
  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};
  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module eq_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 == in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <ferrandi@elet.polimi.it>, Christian Pilato <pilato@elet.polimi.it>
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module MUX_GATE(sel, in1, in2, out1);
  parameter BITSIZE_in1=32, BITSIZE_in2=32, BITSIZE_out1=32;
  // IN
  input sel;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = sel ? in1 : in2;
endmodule

// Datapath RTL descrition for coreA
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module datapath_coreA(clock, reset, in_port_array, in_port_size, return_port, M_Rdata_ram, M_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size, wrenable_reg_2, selector_MUX_21_reg_1_0_0_0, selector_MUX_0_reg_2_0_0_1, selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0, selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0, wrenable_reg_4, wrenable_reg_1, wrenable_reg_0, wrenable_reg_3, selector_MUX_30_MEMORY_CTRL_23_0_1_0_0, selector_MUX_22_reg_0_0_0_0, selector_IN_UNBOUNDED_coreA_1_19, fuselector_MEMORY_CTRL_23_0_LOAD, fuselector_MEMORY_CTRL_23_0_STORE, selector_MUX_0_reg_2_0_0_0, OUT_CONDITION_coreA_1_28, OUT_CONDITION_coreA_1_20, OUT_CONDITION_coreA_1_22, OUT_UNBOUNDED_coreA_1_19);
  // IN
  input clock;
  input reset;
  input [31:0] in_port_array;
  input signed [31:0] in_port_size;
  input [63:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [63:0] Min_Wdata_ram;
  input [7:0] Min_data_ram_size;
  input wrenable_reg_2;
  input selector_MUX_21_reg_1_0_0_0;
  input selector_MUX_0_reg_2_0_0_1;
  input selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0;
  input selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0;
  input wrenable_reg_4;
  input wrenable_reg_1;
  input wrenable_reg_0;
  input wrenable_reg_3;
  input selector_MUX_30_MEMORY_CTRL_23_0_1_0_0;
  input selector_MUX_22_reg_0_0_0_0;
  input selector_IN_UNBOUNDED_coreA_1_19;
  input fuselector_MEMORY_CTRL_23_0_LOAD;
  input fuselector_MEMORY_CTRL_23_0_STORE;
  input selector_MUX_0_reg_2_0_0_0;
  // OUT
  output signed [31:0] return_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [63:0] Mout_Wdata_ram;
  output [7:0] Mout_data_ram_size;
  output OUT_CONDITION_coreA_1_28;
  output OUT_CONDITION_coreA_1_20;
  output OUT_CONDITION_coreA_1_22;
  output OUT_UNBOUNDED_coreA_1_19;
  // Component and signal declarations
  wire [31:0] out_MUX_0_reg_2_0_0_0;
  wire [31:0] out_MUX_0_reg_2_0_0_1;
  wire [31:0] out_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0;
  wire [31:0] out_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0;
  wire [31:0] out_MUX_21_reg_1_0_0_0;
  wire [31:0] out_MUX_22_reg_0_0_0_0;
  wire [31:0] out_MUX_30_MEMORY_CTRL_23_0_1_0_0;
  wire [31:0] out_const_0;
  wire [31:0] out_const_1;
  wire [31:0] out_const_2;
  wire [7:0] out_const_3;
  wire [31:0] out_fu_coreA_1_14;
  wire [31:0] out_fu_coreA_1_15;
  wire [31:0] out_fu_coreA_1_16;
  wire [31:0] out_fu_coreA_1_17;
  wire [31:0] out_fu_coreA_1_18;
  wire [31:0] out_fu_coreA_1_19;
  wire out_fu_coreA_1_20;
  wire [31:0] out_fu_coreA_1_21;
  wire [31:0] out_fu_coreA_1_23;
  wire [31:0] out_fu_coreA_1_25;
  wire [31:0] out_fu_coreA_1_30;
  wire [31:0] out_fu_coreA_1_447;
  wire [31:0] out_fu_coreA_1_448;
  wire [31:0] out_fu_coreA_1_449;
  wire [31:0] out_fu_coreA_1_450;
  wire [31:0] out_fu_coreA_1_451;
  wire [31:0] out_fu_coreA_1_452;
  wire [31:0] out_fu_coreA_1_453;
  wire [31:0] out_fu_coreA_1_454;
  wire out_lt_expr_FU_32_32_32_21_0;
  wire [31:0] out_reg_0;
  wire [31:0] out_reg_1;
  wire [31:0] out_reg_2;
  wire [31:0] out_reg_3;
  wire [31:0] out_reg_4;
  wire s_done_fu_coreA_1_19;
  
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_0_reg_2_0_0_0 (.out1(out_MUX_0_reg_2_0_0_0), .sel(selector_MUX_0_reg_2_0_0_0), .in1(out_fu_coreA_1_449), .in2(out_fu_coreA_1_447));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_0_reg_2_0_0_1 (.out1(out_MUX_0_reg_2_0_0_1), .sel(selector_MUX_0_reg_2_0_0_1), .in1(out_fu_coreA_1_448), .in2(out_MUX_0_reg_2_0_0_0));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0 (.out1(out_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0), .sel(selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0), .in1(out_reg_1), .in2(out_reg_3));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0 (.out1(out_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0), .sel(selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0), .in1(out_reg_0), .in2(in_port_size));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_21_reg_1_0_0_0 (.out1(out_MUX_21_reg_1_0_0_0), .sel(selector_MUX_21_reg_1_0_0_0), .in1(out_fu_coreA_1_451), .in2(out_fu_coreA_1_450));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_22_reg_0_0_0_0 (.out1(out_MUX_22_reg_0_0_0_0), .sel(selector_MUX_22_reg_0_0_0_0), .in1(out_fu_coreA_1_453), .in2(out_fu_coreA_1_452));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_30_MEMORY_CTRL_23_0_1_0_0 (.out1(out_MUX_30_MEMORY_CTRL_23_0_1_0_0), .sel(selector_MUX_30_MEMORY_CTRL_23_0_1_0_0), .in1(out_reg_4), .in2(out_fu_coreA_1_18));
  constant_value #(.BITSIZE_out1(32), .value(32'b00000000000000000000000000000000)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(32), .value(32'b00000000000000000000000000000001)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(32), .value(32'b00000000000000000000000000000100)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(8), .value(8'b00100000)) const_3 (.out1(out_const_3));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_14 (.out1(out_fu_coreA_1_14), .in1(out_const_0));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_15 (.out1(out_fu_coreA_1_15), .in1(out_const_0));
  IUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_16 (.out1(out_fu_coreA_1_16), .in1(out_reg_1));
  ui_mult_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) fu_coreA_1_17 (.out1(out_fu_coreA_1_17), .in1(out_fu_coreA_1_16), .in2(out_const_2));
  pointer_plus_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) fu_coreA_1_18 (.out1(out_fu_coreA_1_18), .in1(in_port_array), .in2(out_fu_coreA_1_17));
  MEMORY_CTRL #(.BITSIZE_in1(1), .BITSIZE_in2(32), .BITSIZE_in3(8), .BITSIZE_out1(32), .BITSIZE_Min_addr_ram(32), .BITSIZE_Mout_addr_ram(32), .BITSIZE_M_Rdata_ram(64), .BITSIZE_Min_Wdata_ram(64), .BITSIZE_Mout_Wdata_ram(64)) fu_coreA_1_19 (.done_port(s_done_fu_coreA_1_19), .out1(out_fu_coreA_1_19), .Mout_oe_ram(Mout_oe_ram), .Mout_we_ram(Mout_we_ram), .Mout_addr_ram(Mout_addr_ram), .Mout_Wdata_ram(Mout_Wdata_ram), .Mout_data_ram_size(Mout_data_ram_size), .clock(clock), .start_port(selector_IN_UNBOUNDED_coreA_1_19), .in1(1'b0), .in2(out_MUX_30_MEMORY_CTRL_23_0_1_0_0), .in3(out_const_3), .sel_LOAD(fuselector_MEMORY_CTRL_23_0_LOAD), .sel_STORE(fuselector_MEMORY_CTRL_23_0_STORE), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .M_Rdata_ram(M_Rdata_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size), .M_DataRdy(M_DataRdy));
  eq_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(1)) fu_coreA_1_20 (.out1(out_fu_coreA_1_20), .in1(out_reg_1), .in2(out_const_0));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_21 (.out1(out_fu_coreA_1_21), .in1(out_reg_3));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_23 (.out1(out_fu_coreA_1_23), .in1(out_reg_3));
  plus_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) fu_coreA_1_25 (.out1(out_fu_coreA_1_25), .in1(out_reg_1), .in2(out_const_1));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_30 (.out1(out_fu_coreA_1_30), .in1(out_fu_coreA_1_454));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_447 (.out1(out_fu_coreA_1_447), .in1(out_fu_coreA_1_21));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_448 (.out1(out_fu_coreA_1_448), .in1(out_reg_0));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_449 (.out1(out_fu_coreA_1_449), .in1(out_fu_coreA_1_23));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_450 (.out1(out_fu_coreA_1_450), .in1(out_fu_coreA_1_15));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_451 (.out1(out_fu_coreA_1_451), .in1(out_fu_coreA_1_25));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_452 (.out1(out_fu_coreA_1_452), .in1(out_fu_coreA_1_14));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_453 (.out1(out_fu_coreA_1_453), .in1(out_reg_2));
  ASSIGN_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_coreA_1_454 (.out1(out_fu_coreA_1_454), .in1(out_reg_0));
  lt_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(1)) lt_expr_FU_32_32_32_21_0 (.out1(out_lt_expr_FU_32_32_32_21_0), .in1(out_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0), .in2(out_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_0 (.out1(out_reg_0), .in1(out_MUX_22_reg_0_0_0_0), .wenable(wrenable_reg_0), .clock(clock), .reset(reset));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_1 (.out1(out_reg_1), .in1(out_MUX_21_reg_1_0_0_0), .wenable(wrenable_reg_1), .clock(clock), .reset(reset));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_2 (.out1(out_reg_2), .in1(out_MUX_0_reg_2_0_0_1), .wenable(wrenable_reg_2), .clock(clock), .reset(reset));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_3 (.out1(out_reg_3), .in1(out_fu_coreA_1_19), .wenable(wrenable_reg_3), .clock(clock), .reset(reset));
  register_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_4 (.out1(out_reg_4), .in1(out_fu_coreA_1_18), .wenable(wrenable_reg_4), .clock(clock), .reset(reset));
  // io-signal post fix
  assign return_port = out_fu_coreA_1_30;
  assign OUT_CONDITION_coreA_1_28 = out_lt_expr_FU_32_32_32_21_0;
  assign OUT_CONDITION_coreA_1_20 = out_fu_coreA_1_20;
  assign OUT_CONDITION_coreA_1_22 = out_lt_expr_FU_32_32_32_21_0;
  assign OUT_UNBOUNDED_coreA_1_19 = s_done_fu_coreA_1_19;

endmodule

// FSM based controller descrition for coreA
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module controller_coreA(done_port, wrenable_reg_2, selector_MUX_21_reg_1_0_0_0, selector_MUX_0_reg_2_0_0_1, selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0, selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0, wrenable_reg_4, wrenable_reg_1, wrenable_reg_0, wrenable_reg_3, selector_MUX_30_MEMORY_CTRL_23_0_1_0_0, selector_MUX_22_reg_0_0_0_0, selector_IN_UNBOUNDED_coreA_1_19, fuselector_MEMORY_CTRL_23_0_LOAD, fuselector_MEMORY_CTRL_23_0_STORE, selector_MUX_0_reg_2_0_0_0, OUT_CONDITION_coreA_1_28, OUT_CONDITION_coreA_1_20, OUT_CONDITION_coreA_1_22, OUT_UNBOUNDED_coreA_1_19, clock, reset, start_port);
  // IN
  input OUT_CONDITION_coreA_1_28;
  input OUT_CONDITION_coreA_1_20;
  input OUT_CONDITION_coreA_1_22;
  input OUT_UNBOUNDED_coreA_1_19;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output wrenable_reg_2;
  output selector_MUX_21_reg_1_0_0_0;
  output selector_MUX_0_reg_2_0_0_1;
  output selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0;
  output selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0;
  output wrenable_reg_4;
  output wrenable_reg_1;
  output wrenable_reg_0;
  output wrenable_reg_3;
  output selector_MUX_30_MEMORY_CTRL_23_0_1_0_0;
  output selector_MUX_22_reg_0_0_0_0;
  output selector_IN_UNBOUNDED_coreA_1_19;
  output fuselector_MEMORY_CTRL_23_0_LOAD;
  output fuselector_MEMORY_CTRL_23_0_STORE;
  output selector_MUX_0_reg_2_0_0_0;
  parameter [3:0] S_0 = 4'd0,
    S_8 = 4'd1,
    S_9 = 4'd2,
    S_1 = 4'd3,
    S_2 = 4'd4,
    S_3 = 4'd5,
    S_5 = 4'd6,
    S_10 = 4'd7,
    S_6 = 4'd8,
    S_4 = 4'd9,
    S_7 = 4'd10;
  // synthesis attribute init of _present_state is S_0;
  // synthesis attribute use_sync_reset of _present_state is no;
  reg [3:0] _present_state, _next_state;
  reg done_port;
  reg wrenable_reg_2;
  reg selector_MUX_21_reg_1_0_0_0;
  reg selector_MUX_0_reg_2_0_0_1;
  reg selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0;
  reg selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0;
  reg wrenable_reg_4;
  reg wrenable_reg_1;
  reg wrenable_reg_0;
  reg wrenable_reg_3;
  reg selector_MUX_30_MEMORY_CTRL_23_0_1_0_0;
  reg selector_MUX_22_reg_0_0_0_0;
  reg selector_IN_UNBOUNDED_coreA_1_19;
  reg fuselector_MEMORY_CTRL_23_0_LOAD;
  reg fuselector_MEMORY_CTRL_23_0_STORE;
  reg selector_MUX_0_reg_2_0_0_0;
  
  always @(posedge clock or posedge reset)
    if (reset) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(_present_state or OUT_CONDITION_coreA_1_28 or OUT_CONDITION_coreA_1_20 or OUT_CONDITION_coreA_1_22 or OUT_UNBOUNDED_coreA_1_19 or start_port)
  begin
    _next_state = S_0;
    done_port = 1'b0;
    wrenable_reg_2 = 1'b0;
    selector_MUX_21_reg_1_0_0_0 = 1'b0;
    selector_MUX_0_reg_2_0_0_1 = 1'b0;
    selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0 = 1'b0;
    selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_3 = 1'b0;
    selector_MUX_30_MEMORY_CTRL_23_0_1_0_0 = 1'b0;
    selector_MUX_22_reg_0_0_0_0 = 1'b0;
    selector_IN_UNBOUNDED_coreA_1_19 = 1'b0;
    fuselector_MEMORY_CTRL_23_0_LOAD = 1'b0;
    fuselector_MEMORY_CTRL_23_0_STORE = 1'b0;
    selector_MUX_0_reg_2_0_0_0 = 1'b0;
    case (_present_state)
      S_0 :
        if(~start_port)
        begin
          _next_state = S_0;
        end
        else
        begin
          wrenable_reg_1 = 1'b1;
          wrenable_reg_0 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0 = 1'b1;
          if (OUT_CONDITION_coreA_1_28 == 1'b1)
            begin
              _next_state = S_1;
            end
          else
            begin
              _next_state = S_9;
            end
        end
      S_9 :
        begin
          _next_state = S_0;
          done_port = 1'b1;
        end
      S_1 :
        begin
          wrenable_reg_4 = 1'b1;
          wrenable_reg_3 = 1'b1;
          selector_IN_UNBOUNDED_coreA_1_19 = 1'b1;
          fuselector_MEMORY_CTRL_23_0_LOAD = 1'b1;
          if (OUT_UNBOUNDED_coreA_1_19 == 1'b0)
            begin
              _next_state = S_2;
            end
          else
            begin
              _next_state = S_3;
            end
        end
      S_2 :
        begin
          wrenable_reg_3 = 1'b1;
          selector_MUX_30_MEMORY_CTRL_23_0_1_0_0 = 1'b1;
          fuselector_MEMORY_CTRL_23_0_LOAD = 1'b1;
          if (OUT_UNBOUNDED_coreA_1_19 == 1'b0)
            begin
              _next_state = S_2;
            end
          else
            begin
              _next_state = S_3;
            end
        end
      S_3 :
        begin
          if (OUT_CONDITION_coreA_1_20 == 1'b1)
            begin
              _next_state = S_4;
            end
          else
            begin
              _next_state = S_5;
            end
        end
      S_5 :
        begin
          selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0 = 1'b1;
          if (OUT_CONDITION_coreA_1_22 == 1'b1)
            begin
              _next_state = S_6;
            end
          else
            begin
              _next_state = S_10;
            end
        end
      S_10 :
        begin
          wrenable_reg_2 = 1'b1;
          selector_MUX_0_reg_2_0_0_1 = 1'b1;
          _next_state = S_7;
        end
      S_6 :
        begin
          wrenable_reg_2 = 1'b1;
          selector_MUX_0_reg_2_0_0_0 = 1'b1;
          _next_state = S_7;
        end
      S_4 :
        begin
          wrenable_reg_2 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          selector_MUX_21_reg_1_0_0_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_0 = 1'b1;
          selector_MUX_22_reg_0_0_0_0 = 1'b1;
          _next_state = S_8;
        end
    endcase
  end
endmodule

// Top circuit for coreA
// Copyright (C) 2004-2011 Politecnico di Milano
// Author(s): module automatically generated by bambu
// License: PANDA_GPLv3
`timescale 1ns / 1ps
module coreA(clock, reset, start_port, done_port, array_S, size, return_port, M_Rdata_ram, M_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size);
  // IN
  input clock;
  input reset;
  input start_port;
  input [31:0] array_S;
  input signed [31:0] size;
  input [63:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [63:0] Min_Wdata_ram;
  input [7:0] Min_data_ram_size;
  // OUT
  output done_port;
  output signed [31:0] return_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [63:0] Mout_Wdata_ram;
  output [7:0] Mout_data_ram_size;
  // Component and signal declarations
  wire OUT_CONDITION_coreA_1_20;
  wire OUT_CONDITION_coreA_1_22;
  wire OUT_CONDITION_coreA_1_28;
  wire OUT_UNBOUNDED_coreA_1_19;
  wire fuselector_MEMORY_CTRL_23_0_LOAD;
  wire fuselector_MEMORY_CTRL_23_0_STORE;
  wire selector_IN_UNBOUNDED_coreA_1_19;
  wire selector_MUX_0_reg_2_0_0_0;
  wire selector_MUX_0_reg_2_0_0_1;
  wire selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0;
  wire selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0;
  wire selector_MUX_21_reg_1_0_0_0;
  wire selector_MUX_22_reg_0_0_0_0;
  wire selector_MUX_30_MEMORY_CTRL_23_0_1_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  
  controller_coreA Controller_i (.done_port(done_port), .wrenable_reg_2(wrenable_reg_2), .selector_MUX_21_reg_1_0_0_0(selector_MUX_21_reg_1_0_0_0), .selector_MUX_0_reg_2_0_0_1(selector_MUX_0_reg_2_0_0_1), .selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0(selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0), .selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0(selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_3(wrenable_reg_3), .selector_MUX_30_MEMORY_CTRL_23_0_1_0_0(selector_MUX_30_MEMORY_CTRL_23_0_1_0_0), .selector_MUX_22_reg_0_0_0_0(selector_MUX_22_reg_0_0_0_0), .selector_IN_UNBOUNDED_coreA_1_19(selector_IN_UNBOUNDED_coreA_1_19), .fuselector_MEMORY_CTRL_23_0_LOAD(fuselector_MEMORY_CTRL_23_0_LOAD), .fuselector_MEMORY_CTRL_23_0_STORE(fuselector_MEMORY_CTRL_23_0_STORE), .selector_MUX_0_reg_2_0_0_0(selector_MUX_0_reg_2_0_0_0), .OUT_CONDITION_coreA_1_28(OUT_CONDITION_coreA_1_28), .OUT_CONDITION_coreA_1_20(OUT_CONDITION_coreA_1_20), .OUT_CONDITION_coreA_1_22(OUT_CONDITION_coreA_1_22), .OUT_UNBOUNDED_coreA_1_19(OUT_UNBOUNDED_coreA_1_19), .clock(clock), .reset(reset), .start_port(start_port));
  datapath_coreA Datapath_i (.return_port(return_port), .Mout_oe_ram(Mout_oe_ram), .Mout_we_ram(Mout_we_ram), .Mout_addr_ram(Mout_addr_ram), .Mout_Wdata_ram(Mout_Wdata_ram), .Mout_data_ram_size(Mout_data_ram_size), .OUT_CONDITION_coreA_1_28(OUT_CONDITION_coreA_1_28), .OUT_CONDITION_coreA_1_20(OUT_CONDITION_coreA_1_20), .OUT_CONDITION_coreA_1_22(OUT_CONDITION_coreA_1_22), .OUT_UNBOUNDED_coreA_1_19(OUT_UNBOUNDED_coreA_1_19), .clock(clock), .reset(reset), .in_port_array(array_S), .in_port_size(size), .M_Rdata_ram(M_Rdata_ram), .M_DataRdy(M_DataRdy), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size), .wrenable_reg_2(wrenable_reg_2), .selector_MUX_21_reg_1_0_0_0(selector_MUX_21_reg_1_0_0_0), .selector_MUX_0_reg_2_0_0_1(selector_MUX_0_reg_2_0_0_1), .selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0(selector_MUX_13_lt_expr_FU_32_32_32_21_0_1_0_0), .selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0(selector_MUX_12_lt_expr_FU_32_32_32_21_0_0_0_0), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_3(wrenable_reg_3), .selector_MUX_30_MEMORY_CTRL_23_0_1_0_0(selector_MUX_30_MEMORY_CTRL_23_0_1_0_0), .selector_MUX_22_reg_0_0_0_0(selector_MUX_22_reg_0_0_0_0), .selector_IN_UNBOUNDED_coreA_1_19(selector_IN_UNBOUNDED_coreA_1_19), .fuselector_MEMORY_CTRL_23_0_LOAD(fuselector_MEMORY_CTRL_23_0_LOAD), .fuselector_MEMORY_CTRL_23_0_STORE(fuselector_MEMORY_CTRL_23_0_STORE), .selector_MUX_0_reg_2_0_0_0(selector_MUX_0_reg_2_0_0_0));

endmodule

